# Get the Managed Instance identity
data "azurerm_mssql_managed_instance" "mi_info" {
  name                = var.mi_name
  resource_group_name = var.azurerm_resource_group_name
  depends_on          = [module.optimized-mssql-managed-instance]
}

data "azurerm_virtual_network" "vnet" {
  name                = var.azurerm_virtual_network_name
  resource_group_name = var.azurerm_subnet_resource_group_name
}

data "azurerm_subnet" "subnet" {
  name                 = var.azurerm_subnet_name
  virtual_network_name = data.azurerm_virtual_network.vnet.name
  resource_group_name  = var.azurerm_subnet_resource_group_name
}

## NOTE: For the module below, please see ther variables.tf file for the required variables ##
module "optimized-mssql-managed-instance" {
  mi_name                      = var.mi_name
  source                       = "intel/azure-mssql-managed-instance/intel"
  azurerm_virtual_network_name         =  var.azurerm_virtual_network_name
  azurerm_resource_group_name          =  var.azurerm_resource_group_name
  azurerm_subnet_resource_group_name   =  var.azurerm_subnet_resource_group_name 
  azurerm_subnet_name                  =  var.azurerm_subnet_name
  
  administrator_login_password         = var.administrator_login_password
  administrator_login                  = "sqladmin"
  license_type                         = "BasePrice"
  vcore_count                          = 4
  sku_name                             = "GP_Gen8IH"
  storage_size_in_gb                   = 32
   
  tags = {
    owner    = "owner@company.com"
    duration = "4"
  }
}

resource "azurerm_storage_account" "example_storage_account" {
  name                     = var.storage_account_name
  resource_group_name      = var.azurerm_resource_group_name
  location                 = "eastus2" # Replace with actual location of yoru resource group
  account_tier             = "Standard"
  account_replication_type = "GRS"
  
  # OPTIONAL SECTION: Settings to comply with the policy - check with your organization's requirements
  allow_nested_items_to_be_public = false
  min_tls_version                 = "TLS1_2"

  # IMPORTANT: For vulnerability assessment to work properly
  # The SQL Managed Instance needs access to this storage
  public_network_access_enabled   = true  # Consider using private endpoints instead
  
  
  # OPTIONAL SECTION: Enable a private endpoint for secure access - check with your organization's requirements
  network_rules {
    default_action = "Allow" # Temporarily allow access for testing - for production, set to "Deny"
    bypass         = ["AzureServices"]  # Critical - allows Azure services to access
  }

    # Add identity (recommended) for key vault integration
  identity {
    type = "SystemAssigned"
  }
   
  tags = {
   purpose = "SQLVulnerabilityAssessment"
  }
}

# Grant SQL MI access to the storage account
resource "azurerm_role_assignment" "mi_storage_blob_contributor" {
  scope                = azurerm_storage_account.example_storage_account.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = data.azurerm_mssql_managed_instance.mi_info.identity[0].principal_id
  depends_on           = [azurerm_storage_account.example_storage_account]
}

# Optional but recommended - add explicit contributor role
resource "azurerm_role_assignment" "mi_storage_contributor" {
  scope                = azurerm_storage_account.example_storage_account.id
  role_definition_name = "Storage Account Contributor"
  principal_id         = data.azurerm_mssql_managed_instance.mi_info.identity[0].principal_id
  depends_on           = [azurerm_storage_account.example_storage_account]
}

resource "azurerm_storage_container" "example_container" {
  name                  = var.azurerm_storage_container
  storage_account_name  = azurerm_storage_account.example_storage_account.name
  container_access_type = "private"
}

resource "azurerm_mssql_managed_instance_security_alert_policy" "example_alert_policy" {
  resource_group_name        = var.azurerm_resource_group_name
  managed_instance_name      = var.mi_name
  enabled                    = true
  storage_endpoint           = azurerm_storage_account.example_storage_account.primary_blob_endpoint
  #storage_account_access_key = azurerm_storage_account.example_storage_account.primary_access_key
  retention_days             = 30
  depends_on            = [azurerm_role_assignment.mi_storage_blob_contributor]
}

resource "azurerm_mssql_managed_instance_vulnerability_assessment" "example_assessment" {
  managed_instance_id        = module.optimized-mssql-managed-instance.managed_instance_id
  storage_container_path     = "${azurerm_storage_account.example_storage_account.primary_blob_endpoint}${azurerm_storage_container.example_container.name}/"
  #storage_account_access_key = azurerm_storage_account.example_storage_account.primary_access_key

  recurring_scans {
    enabled                   = true
    email_subscription_admins = true
    emails = [
      "user@company.com"
    ]
  }
  depends_on = [azurerm_mssql_managed_instance_security_alert_policy.example_alert_policy]
}